use "Math";

# Test advanced mathematical functions

print "$expect$";

# Test gamma function (Γ(n) = (n-1)! for positive integers)
print 1;       # Math.gamma(1) = Γ(1) = 0! = 1
print 1;       # Math.gamma(2) = Γ(2) = 1! = 1  
print 2;       # Math.gamma(3) = Γ(3) = 2! = 2
print 6;       # Math.gamma(4) = Γ(4) = 3! = 6

# Test logb function with various bases
print 3;       # Math.logb(8, 2) = log₂(8) = 3
print 2;       # Math.logb(100, 10) = log₁₀(100) = 2
print 4;       # Math.logb(81, 3) = log₃(81) = 4

# Test clz32 with powers of 2
print 31;      # Math.clz32(1) = 31 leading zeros
print 30;      # Math.clz32(2) = 30 leading zeros  
print 29;      # Math.clz32(4) = 29 leading zeros
print 28;      # Math.clz32(8) = 28 leading zeros

# Test imul with various cases
print 15;      # Math.imul(3, 5)
print -15;     # Math.imul(-3, 5)
print -15;     # Math.imul(3, -5)
print 15;      # Math.imul(-3, -5)

# Test fmod vs remainder difference
print 1;       # Math.fmod(7, 3) = 1
print 1;       # Math.remainder(7, 3) = 1
print 2;       # Math.fmod(8, 3) = 2
print -1;      # Math.remainder(8, 3) = -1 (rounds to nearest)

# Test mathematical constants access
print true;    # Math.PI > 3.14 && Math.PI < 3.15
print true;    # Math.E > 2.71 && Math.E < 2.72
print true;    # Math.SQRT2 > 1.41 && Math.SQRT2 < 1.42

# Test angle conversions with precision
print true;    # Math.abs(Math.radians(Math.degrees(1)) - 1) < 0.001
print true;    # Math.abs(Math.degrees(Math.radians(90)) - 90) < 0.001

# Test lerp and map relationship
:lerp_result = Math.lerp(10, 20, 0.3);
:map_result = Math.map(0.3, 0, 1, 10, 20);
print true;    # Math.abs(lerp_result - map_result) < 0.001

print "$actual$";

# Test gamma function
print Math.gamma(1);
print Math.gamma(2);
print Math.gamma(3);
print Math.gamma(4);

# Test logb function with various bases
print Math.logb(8, 2);
print Math.logb(100, 10);
print Math.logb(81, 3);

# Test clz32 with powers of 2
print Math.clz32(1);
print Math.clz32(2);
print Math.clz32(4);
print Math.clz32(8);

# Test imul with various cases
print Math.imul(3, 5);
print Math.imul(-3, 5);
print Math.imul(3, -5);
print Math.imul(-3, -5);

# Test fmod vs remainder difference
print Math.fmod(7, 3);
print Math.remainder(7, 3);
print Math.fmod(8, 3);
print Math.remainder(8, 3);

# Test mathematical constants access
print (Math.PI > 3.14 && Math.PI < 3.15);
print (Math.E > 2.71 && Math.E < 2.72);
print (Math.SQRT2 > 1.41 && Math.SQRT2 < 1.42);

# Test angle conversions with precision
print (Math.abs(Math.radians(Math.degrees(1)) - 1) < 0.001);
print (Math.abs(Math.degrees(Math.radians(90)) - 90) < 0.001);

# Test lerp and map relationship
:lerp_result2 = Math.lerp(10, 20, 0.3);
:map_result2 = Math.map(0.3, 0, 1, 10, 20);
print (Math.abs(lerp_result2 - map_result2) < 0.001);